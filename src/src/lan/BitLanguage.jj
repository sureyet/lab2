/**
 * JavaCC file
 */
options{
//  JDK_VERSION = "1.5";
  static  = false;
}
PARSER_BEGIN(BitLanguage)
package lan;
import java.io.*;
import extract.*;

public class BitLanguage{
	public ValueStack valueStack=new ValueStack();
	private IfExecute ifExecute=new IfExecute();
  public static void main(String args[])throws ParseException, IOException{
    evaluate(args[0]);
  }
  
  public static void evaluate(String path) throws ParseException, IOException{
  	FileInputStream fileInputStream = new FileInputStream(new File(path));
    BitLanguage bitLanguage = new BitLanguage(fileInputStream);
    bitLanguage.analyse();
    bitLanguage.valueStack.showValue();
//    for (int i = 0;i<2;i++){
//      bitLanguage.analyse();
//      bitLanguage.valueStack.showValue();
//      
//      fileInputStream.close();
//      fileInputStream = new FileInputStream(new File("bit.txt"));
//      bitLanguage.ReInit(fileInputStream);
//      bitLanguage.valueStack.setEnemy(i);
//    }
    fileInputStream.close();
  }
}
PARSER_END(BitLanguage)
SKIP:{
  " "
  | "\r"
  | "\t"
  | "\n"
}
TOKEN:/* OPERATORS */
{
  <letter:["a"-"z", "A"-"Z"]>
  | <digit:["0"-"9"]>
}
void analyse():{}{
  statement()(statement())*
}
void statement():{}{
  declare()
  | block()
  | assignment()";"
  | ifStatement()
  | whileStatement()
  | returnStatement()";"
}
void declare():{
  String key;
}
{
  typeID()key = ID()";"
  {
  	if(ifExecute.peek())
    	valueStack.putInt(key, 0);
  }
}
void typeID():{}{
  "boolean"
  | "int"
}
String ID():{
  Token x;
  String id = "";
}
{
  x = <letter>{
    id+=String.valueOf(x.image);
  }
  (x = <digit>{
    id+=String.valueOf(x.image);
  }
  | x = <letter>{
    id+=String.valueOf(x.image);
  }
  )*{
    return id;
  }
}
void block():{}{
  "{"statementList()"}"
}
void statementList():{}{
  (statement())*
}
void ifStatement():
{
	Token x;
	int value=0;
}
{
  "if"
  {ifExecute.put();}
  "("value=expression()")"
  {
  	if(value<=0)
  		ifExecute.set(false);
  }
  statement()
  [LOOKAHEAD(1)"else"
  {
  	if(value>0)
  		ifExecute.set(false);
  	else
  		ifExecute.set(true);
  }
  statement()]
  {ifExecute.pop();}
  
}
void whileStatement():
{
	int value;
	int temp_jj_gen=0;
	int brace_num=0;
	Token temp_token;
}
{
	{
		temp_jj_gen=jj_gen;
		temp_token=token;
	}
  "while""("
  value=expression()
  ")"
  {
  	if(value<=0){
  		token=getNextToken();
  		if(token.image.equals("{"))
  			brace_num+=1;
  		while(brace_num>0){
  			token=getNextToken();
  			if(token.image.equals("{"))
  				brace_num+=1;
  			else if(token.image.equals("}"))
  				brace_num-=1;
  		}
  	}
  }
  statement()
  {
  	if(value>0){
  		jj_gen=temp_jj_gen;
  		token=temp_token;
  	}
  }
}
void returnStatement():{
  int value=0;
}
{
  "return" value=expression()
  {
  	if(ifExecute.peek())
  		valueStack.returnValue=value;
  }
}
void assignment():{
  int value = 0;
  String key = "";
}
{
  key = primaryExpression()"="value = expression()
  {
    if (valueStack.containInt(key)){
    	if(ifExecute.peek())
     	 valueStack.putInt(key, value);
    }
    else {
      throw new Error("No value named "+key+"!");
    }
  }
}
int expression():{
  int value = 0;
}
{
  value = globalRandom(){
    return value;
  }
  | value = globalEnemy(){
    return value;
  }
  | value = conditionalOrExpression(){
    return value;
  }
}
String primaryExpression():{
  String id;
}
{
  //	"CUR" | NUM() | ID() | "(" expression() ")"
"CUR"{
    return "CUR";
  }
  | id = ID(){
    return id;
  }
}
int globalRandom():{
  int value;
}
{
  "RANDOM""("value = expression()")"{
    double tempValue = value*Math.random();
    return (int )Math.rint(tempValue);
  }
}
int globalEnemy():{
  int value;
}
{
  "ENEMY""["value = expression()"]"{
    return valueStack.enemy[value];
  }
}
int conditionalOrExpression():{
  int temp = 0;
  int value = 0;
}
{
  temp = conditionalandExpression(){
    value = temp;
  }
  (LOOKAHEAD(1)"||"temp = conditionalOrExpression(){
    if (value <= 0 && temp <= 0)value = 0;
    else value = 1;
  }
  )*{
    return value;
  }
}
int conditionalandExpression():{
  int temp = 0;
  int value = 0;
}
{
  temp = equalityExpression(){
    value = temp;
  }
  (LOOKAHEAD(1)"&&"temp = conditionalandExpression(){
    if (value>0 && temp>0)value = 1;
    else value = 0;
  }
  )*{
    return value;
  }
}
int equalityExpression():{
  int temp = 0;
  int value = 0;
  int op = -1;
}
{
  temp = relationalExpression(){
    value = temp;
  }
  (LOOKAHEAD(1)("=="{
    op = 0;
  }
  | "!="{
    op = 1;
  }
  )temp = equalityExpression())*{
    switch (op){
      case 0:value = value == temp?1:0;
      break ;
      case 1:value = value != temp?1:0;
      break ;
      default :break ;
    }
  }
  {
    return value;
  }
}
int relationalExpression():{
  int temp = 0;
  int value = 0;
  int op = -1;
}
{
  temp = additiveExpression(){
    value = temp;
  }
  (LOOKAHEAD(1)(">"{
    op = 0;
  }
  | ">="{
    op = 1;
  }
  | "<"{
    op = 2;
  }
  | "<="{
    op = 3;
  }
  )temp = relationalExpression(){
    switch (op){
      case 0:value = value>temp?1:0;
      break ;
      case 1:value = value >= temp?1:0;
      break ;
      case 2:value = value<temp?1:0;
      break ;
      case 3:value = value <= temp?1:0;
      break ;
      default :break ;
    }
  }
  )*{
    return value;
  }
}
int additiveExpression():{
  int temp = 0;
  int value = 0;
  int op = -1;
}
{
  temp = unaryExpression(){
    value = temp;
  }
  (LOOKAHEAD(1)("+"{
    op = 0;
  }
  | "-"{
    op = 1;
  }
  )temp = additiveExpression(){
    switch (op){
      case 0:value+=temp;
      break ;
      case 1:value-=temp;
      break ;
      default :break ;
    }
  }
  )*{
    return value;
  }
}
int unaryExpression():{
  int value = 0;
  String key = "";
}
{
  key = primaryExpression(){
    if (key == "CUR")value = valueStack.cur;
    else value = valueStack.getInt(key);
    return value;
  }
  | "("value = expression()")"{
    return value;
  }
  | value = NUM(){
    return value;
  }
}
int NUM():{
  Token x;
  int value = 0;
}
{
  x = <digit>{
    value+=Integer.parseInt(x.image);
  }
  (x = <digit>{
    value*=10;
    value+=Integer.parseInt(x.image);
  }
  )*{
    return value;
  }
}

